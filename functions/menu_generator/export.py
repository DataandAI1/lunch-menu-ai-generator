"""PDF export and email functionality"""

import io
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.image import MIMEImage
from typing import Dict, Optional

from reportlab.lib.pagesizes import letter
from reportlab.lib.units import inch
from reportlab.pdfgen import canvas
from reportlab.lib.utils import ImageReader
import requests

from .models import MenuItem


class PDFExporter:
    """Export menu calendar to PDF format"""
    
    def __init__(self, storage_bucket):
        self.storage_bucket = storage_bucket
    
    def create_pdf(self, menu_items: Dict[str, MenuItem], week_id: str) -> io.BytesIO:
        """Generate PDF version of the menu"""
        
        buffer = io.BytesIO()
        c = canvas.Canvas(buffer, pagesize=letter)
        width, height = letter
        
        # Title
        c.setFont("Helvetica-Bold", 24)
        c.drawCentredString(width/2, height - 50, "Weekly Lunch Menu")
        
        c.setFont("Helvetica", 12)
        c.drawCentredString(width/2, height - 70, f"Week: {week_id}")
        
        # Draw each day
        y_position = height - 120
        
        for day in ['monday', 'tuesday', 'wednesday', 'thursday', 'friday']:
            if day not in menu_items:
                continue
            
            item = menu_items[day]
            
            # Day header
            c.setFont("Helvetica-Bold", 14)
            c.drawString(50, y_position, f"{item.day.capitalize()} - {item.date}")
            y_position -= 20
            
            # Menu item
            c.setFont("Helvetica", 12)
            c.drawString(70, y_position, f"Menu: {item.name}")
            y_position -= 18
            
            # Nutrition info
            if item.nutrition and item.nutrition.has_data:
                c.setFont("Helvetica", 10)
                c.drawString(70, y_position, item.nutrition.format_display())
                y_position -= 15
            
            # Image (if available)
            if item.image_path:
                try:
                    response = requests.get(item.image_path)
                    img = ImageReader(io.BytesIO(response.content))
                    c.drawImage(img, 70, y_position - 100, width=100, height=100, preserveAspectRatio=True)
                except:
                    pass
            
            y_position -= 120
            
            # New page if needed
            if y_position < 100:
                c.showPage()
                y_position = height - 50
        
        c.save()
        buffer.seek(0)
        return buffer
    
    def create_and_upload(self, menu_items: Dict[str, MenuItem], week_id: str) -> str:
        """Create PDF and upload to Firebase Storage"""
        
        # Generate PDF
        pdf_buffer = self.create_pdf(menu_items, week_id)
        
        # Upload to Storage
        blob_path = f"menu_pdfs/{week_id}/menu.pdf"
        blob = self.storage_bucket.blob(blob_path)
        blob.upload_from_file(pdf_buffer, content_type='application/pdf')
        blob.make_public()
        
        return blob.public_url


class EmailService:
    """Send menu via email"""
    
    def __init__(self, email_address: str, email_password: str, smtp_server: str = "smtp.gmail.com", smtp_port: int = 587):
        self.email_address = email_address
        self.email_password = email_password
        self.smtp_server = smtp_server
        self.smtp_port = smtp_port
    
    def send_menu(self, recipient: str, calendar_url: str, pdf_url: Optional[str], week_id: str) -> bool:
        """Send menu calendar via email"""
        
        try:
            msg = MIMEMultipart()
            msg['From'] = self.email_address
            msg['To'] = recipient
            msg['Subject'] = f"Weekly Lunch Menu - {week_id}"
            
            # Email body
            body = f"""
            <html>
            <body>
            <h2>Weekly Lunch Menu</h2>
            <p>Please find attached this week's lunch menu calendar.</p>
            <p><strong>Week:</strong> {week_id}</p>
            <p><img src="{calendar_url}" alt="Weekly Menu" style="max-width: 100%; height: auto;" /></p>
            <p><em>Generated by Lunch Menu AI Generator</em></p>
            </body>
            </html>
            """
            msg.attach(MIMEText(body, 'html'))
            
            # Attach calendar image
            try:
                response = requests.get(calendar_url)
                img = MIMEImage(response.content)
                img.add_header('Content-Disposition', 'attachment', filename='lunch_menu.png')
                msg.attach(img)
            except Exception as e:
                print(f"Error attaching calendar image: {e}")
            
            # Attach PDF if available
            if pdf_url:
                try:
                    from email.mime.application import MIMEApplication
                    response = requests.get(pdf_url)
                    pdf = MIMEApplication(response.content, _subtype='pdf')
                    pdf.add_header('Content-Disposition', 'attachment', filename='lunch_menu.pdf')
                    msg.attach(pdf)
                except Exception as e:
                    print(f"Error attaching PDF: {e}")
            
            # Send email
            with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:
                server.starttls()
                server.login(self.email_address, self.email_password)
                server.send_message(msg)
            
            return True
            
        except Exception as e:
            print(f"Error sending email: {e}")
            return False